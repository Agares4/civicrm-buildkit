#!/bin/bash
set -e

###############################################################################
## Bootstrap

## Determine the absolute path of the directory with the file
## usage: absdirname <file-path>
function absdirname() {
  pushd $(dirname $0) >> /dev/null
    pwd
  popd >> /dev/null
}

BINDIR=$(absdirname "$0")
PRJDIR=$(dirname "$BINDIR")
TMPDIR="$PRJDIR/app/tmp"
BLDDIR="$PRJDIR/build"

source "$PRJDIR/src/civibuild.lib.sh"
cvutil_mkdir "$TMPDIR" "$BLDDIR" "$PRJDIR/app/private"

## Make sure bundled utilities are available, regardless of local config
export PATH="$BINDIR:$PATH"
civi-download-tools --quiet

###############################################################################
## Display usage message
function civibuild_usage() {
  APP=$(basename "$0")

  #Fails in Ubuntu 12.04 Vagrant box ==> cat <<EOT
  php -r 'echo file_get_contents("php://stdin");' <<EOT
Syntax: $APP create <build-name> [options]
Description: Download all code, create databases, create config files
  <build-name>        The name of the sub-directory to build
  --type <type>       The name of the download/install scripts. (If omitted, assume <build-name>) [Optional]
  --url <url>         The public URL of the site
  --title <title>     The title of the site
  --civi-ver <ver>    The branch or tag of CiviCRM desired (master, 4.4, 4.3, 4.3.0, etc) [Optional]
  --cms-ver <ver>     The release of the CMS desired [Optional]
  --force             If the source tree or DB already exists, destroy and recreate
  --force-download    If the source tree already exists, destroy and recreate
  --force-install     If the DB/config already exists, destroy and recreate
  --admin-user        Name of the CMS's administrative user
  --admin-pass        Password for the CMS's administrative user
  --admin-email       Email of the CMS's administrative user
  --demo-user         Name of the CMS's demo user
  --demo-pass         Password for the CMS's demo user
  --demo-email        Email of the CMS's demo user

Syntax: $APP reinstall <build-name>
Description: Short-hand for "$APP create <build-name> --force-install"

Syntax: $APP show <build-name>
Description: Show key details about the build
  <build-name>        The name of the sub-directory to build

Syntax: $APP snapshot <build-name> [options]
Description: Create a snapshot of the build's DBs
  <build-name>           The name of the sub-directory to build
  --snapshot <name>      The name of the snapshot subdirectory. (If omitted, assume <build-name>) [Optional]

Syntax: $APP snapshots
Description: List available snapshots

Syntax: $APP restore <build-name> [options]
Description: Restore HTTP/DB services from a snapshot
  <build-name>           The name of the sub-directory to build
  --snapshot <name>      The name of the snapshot subdirectory. (If omitted, assume <build-name>) [Optional]
  --cms-sql <sql-file>   The path to a SQL backup of the CMS DB [Optional]
  --no-cms               Skip resetting the CMS DB [Optional]
  --civi-sql <sql-file>  The path to a SQL backup of the CiviCRM DB [Optional]
  --no-civi              Skip resetting the CiviCRM DB [Optional]

Syntax: $APP restore-all
Description: Restore *all* HTTP/DB services from their respective snapshots

Syntax: $APP destroy <build-name>
Description: Destroy all data about a particular build
EOT

  exit 99;
}

## Run an external script (based on the site-type)
## usage: civibuild_run <script-name>
function civibuild_run() {
  MAIN_SCRIPT="${SITE_CONFIG_DIR}/$1.sh"
  [ ! -f "$MAIN_SCRIPT" ] && echo "ERROR: Missing main script ($MAIN_SCRIPT)" && exit 98

  echo "[[Execute $MAIN_SCRIPT]]"
  set -ex
  source "$MAIN_SCRIPT"
  set +ex
}

## Run an external script (based on the site-type)
## usage: civibuild_run_optional <script-name>
function civibuild_run_optional() {
  MAIN_SCRIPT="${SITE_CONFIG_DIR}/$1.sh"
  if [ -f "$MAIN_SCRIPT" ]; then
    echo "[[Execute $MAIN_SCRIPT]]"
    set -ex
    source "$MAIN_SCRIPT"
    set +ex
  fi
}

###############################################################################
## Parse options
source "$PRJDIR/src/civibuild.defaults.sh"

ACTION="$1"
[ -z "$ACTION" ] && civibuild_usage
shift

case "$ACTION" in
  snapshots)
    # don't parse SITE_NAME
    ;;
  restore-all)
    # don't parse SITE_NAME
    ;;
  *)
    SITE_NAME="$1"
    [ -z "$SITE_NAME" ] && civibuild_usage
    shift

    if [ -f "${BLDDIR}/${SITE_NAME}.sh" ]; then
      echo "[[Load saved options from ${BLDDIR}/${SITE_NAME}.sh]]"
      source "${BLDDIR}/${SITE_NAME}.sh"
    fi
    ;;
esac


while [ -n "$1" ] ; do
  OPTION="$1"
  shift

  case "$OPTION" in
    -h|--help|-?)
      civibuild_usage
      ;;

    --admin-email)
      ADMIN_EMAIL="$1"
      shift
      ;;

    --admin-pass)
      ADMIN_PASS="$1"
      shift
      ;;

    --admin-user)
      ADMIN_USER="$1"
      shift
      ;;

    --civi-sql)
      CIVI_SQL="$1"
      shift
      ;;

    --civi-ver)
      CIVI_VERSION="$1"
      shift
      ;;

    --cms-sql)
      CMS_SQL="$1"
      shift
      ;;

    --cms-ver)
      CMS_VERSION="$1"
      shift
      ;;

    --demo-email)
      DEMO_EMAIL="$1"
      shift
      ;;

    --demo-pass)
      DEMO_PASS="$1"
      shift
      ;;

    --demo-user)
      DEMO_USER="$1"
      shift
      ;;

    --force)
      FORCE_DOWNLOAD=1
      FORCE_INSTALL=1
      ;;

    --force-download)
      FORCE_DOWNLOAD=1
      ;;

    --force-install)
      FORCE_INSTALL=1
      ;;

    --no-civi)
      CIVI_SQL_SKIP=1
      ;;

    --no-cms)
      CMS_SQL_SKIP=1
      ;;

    --snapshot)
      SNAPSHOT_NAME="$1"
      shift
      ;;

    --title)
      CMS_TITLE="$1"
      shift
      ;;

    --type)
      SITE_TYPE="$1"
      shift
      ;;

    --url)
      CMS_URL="$1"
      shift
      ;;

    *)
      echo "Unrecognized option: $OPTION"
      civibuild_usage
      ;;
  esac
done

source "$PRJDIR/src/civibuild.compute-defaults.sh"

###############################################################################
## Main

case "$ACTION" in
  create)
    echo "[[Create $SITE_NAME (type '$SITE_TYPE' in '$WEB_ROOT')]]"

    if [ -n "$FORCE_DOWNLOAD" -a -d "$WEB_ROOT" ]; then
      rm -rf "$WEB_ROOT"
    fi

    if [ ! -d "$WEB_ROOT" ]; then
      pushd "$PRJDIR" > /dev/null
        if [ -f "$PRJDIR/app/config/git-caches.sh" ]; then
          source "$PRJDIR/app/config/git-caches.sh"
        fi
        civibuild_run download
        git_cache_deref_remotes "$CACHE_DIR" "$WEB_ROOT"
      popd > /dev/null
      if [ ! -d "$WEB_ROOT" ]; then
        echo "Download failed to create directory"
        exit 97
      fi
    fi

    if [ -n "$FORCE_INSTALL" -a -n "$CMS_DB_DSN" ]; then
      pushd "$WEB_ROOT" > /dev/null
        civibuild_run uninstall
      popd > /dev/null
      if [ -d "$PRIVATE_ROOT" ]; then
        rm -rf "$PRIVATE_ROOT"
      fi
    fi

    if [ -n "$FORCE_INSTALL" -o -z "$CMS_DB_DSN" ]; then
      pushd "$WEB_ROOT" > /dev/null
        civibuild_run install
      popd > /dev/null
      amp_snapshot_create
    fi

    cvutil_save "${BLDDIR}/${SITE_NAME}.sh" $PERSISTENT_VARS
    civibuild show "$SITE_NAME"
    ;;

  destroy)
    [ -d "$WEB_ROOT" ] && rm -rf "$WEB_ROOT"
    [ -d "$PRIVATE_ROOT" ] && rm -rf "$PRIVATE_ROOT"
    [ -f "${BLDDIR}/${SITE_NAME}.sh" ] && rm -f "${BLDDIR}/${SITE_NAME}.sh"
    amp cleanup
    ;;

  reinstall)
    civibuild create "$SITE_NAME" --force-install
    ;;

  show)
    cvutil_summary "[[Show site summary]]" \
      CMS_ROOT CMS_URL CMS_DB_DSN \
      CIVI_DB_DSN \
      ADMIN_USER ADMIN_PASS DEMO_USER DEMO_PASS
    civibuild_run_optional show
    echo "[[General notes]]"
    echo " - You may need to restart httpd."
    echo " - You may need to add the hostname and IP to /etc/hosts or DNS."
    ;;

  snapshots)
    ls "$SNAPSHOT_DIR"
    ;;

  snapshot)
    amp_snapshot_create
    ;;

  restore)
    amp_snapshot_restore
    cvutil_save "${BLDDIR}/${SITE_NAME}.sh" $PERSISTENT_VARS
    ;;

  restore-all)
    pushd "$BLDDIR" >> /dev/null
      find . -mindepth 1 -maxdepth 1 -type d | while read dir ; do
        SITE_NAME=$(basename $dir)
        civibuild restore "$SITE_NAME"
      done
    popd >> /dev/null
    ;;

  *)
    echo "Unrecognized action: $ACTION"
    civibuild_usage
    ;;
esac
